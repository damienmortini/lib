{"version":3,"file":"property-graph.modern.js","sources":["../src/event-dispatcher.ts","../src/graph-edge.ts","../src/graph.ts","../src/utils.ts","../src/graph-node.ts"],"sourcesContent":["import type { Graph } from './graph.js';\nimport type { GraphNode } from './graph-node.js';\nimport type { GraphEdge } from './graph-edge.js';\n\nexport interface BaseEvent {\n\ttype: string;\n\t[attachment: string]: unknown;\n}\n\nexport interface GraphEvent extends BaseEvent {\n\ttarget: Graph<GraphNode>;\n}\n\nexport interface GraphNodeEvent extends BaseEvent {\n\ttarget: GraphNode;\n}\n\nexport interface GraphEdgeEvent extends BaseEvent {\n\ttarget: GraphEdge<GraphNode, GraphNode>;\n}\n\nexport type EventListener<E> = (event: E) => void;\n\nexport class EventDispatcher<T extends BaseEvent> {\n\tprivate _listeners = {} as Record<string, EventListener<T>[]>;\n\n\taddEventListener(type: string, listener: EventListener<T>): this {\n\t\tconst listeners = this._listeners;\n\n\t\tif (listeners[type] === undefined) {\n\t\t\tlisteners[type] = [] as EventListener<T>[];\n\t\t}\n\n\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\tlisteners[type].push(listener);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tremoveEventListener(type: string, listener: EventListener<T>): this {\n\t\tif (this._listeners === undefined) return this;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[type];\n\n\t\tif (listenerArray !== undefined) {\n\t\t\tconst index = listenerArray.indexOf(listener);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tdispatchEvent(event: T): this {\n\t\tif (this._listeners === undefined) return this;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[event.type];\n\n\t\tif (listenerArray !== undefined) {\n\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\tconst array = listenerArray.slice(0);\n\n\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\tarray[i].call(this, event as T);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tdispose(): void {\n\t\tfor (const key in this._listeners) {\n\t\t\tdelete this._listeners[key];\n\t\t}\n\t}\n}\n","import { EventDispatcher, GraphEdgeEvent } from './event-dispatcher.js';\nimport { GraphNode } from './graph-node.js';\n\n/**\n * Represents a connection between two {@link GraphNode} resources in a {@link Graph}.\n *\n * The left node is considered the owner, and the right node the resource. The\n * owner is responsible for being able find and remove a reference to a resource, given\n * that link. The resource does not hold a reference to the link or to the owner,\n * although that reverse lookup can be done on the graph.\n */\nexport class GraphEdge<Parent extends GraphNode, Child extends GraphNode> extends EventDispatcher<GraphEdgeEvent> {\n\tprivate _disposed = false;\n\n\tconstructor(\n\t\tprivate readonly _name: string,\n\t\tprivate readonly _parent: Parent,\n\t\tprivate _child: Child,\n\t\tprivate _attributes: Record<string, unknown> = {}\n\t) {\n\t\tsuper();\n\t\tif (!_parent.isOnGraph(_child)) {\n\t\t\tthrow new Error('Cannot connect disconnected graphs.');\n\t\t}\n\t}\n\n\t/** Name. */\n\tgetName(): string {\n\t\treturn this._name;\n\t}\n\n\t/** Owner node. */\n\tgetParent(): Parent {\n\t\treturn this._parent;\n\t}\n\n\t/** Resource node. */\n\tgetChild(): Child {\n\t\treturn this._child;\n\t}\n\n\t/**\n\t * Sets the child node.\n\t *\n\t * @internal Only {@link Graph} implementations may safely call this method directly. Use\n\t * \t{@link Property.swap} or {@link Graph.swapChild} instead.\n\t */\n\tsetChild(child: Child): this {\n\t\tthis._child = child;\n\t\treturn this;\n\t}\n\n\t/** Attributes of the graph node relationship. */\n\tgetAttributes(): Record<string, unknown> {\n\t\treturn this._attributes;\n\t}\n\n\t/** Destroys a (currently intact) edge, updating both the graph and the owner. */\n\tdispose(): void {\n\t\tif (this._disposed) return;\n\t\tthis._disposed = true;\n\t\tthis.dispatchEvent({ type: 'dispose', target: this });\n\t\tsuper.dispose();\n\t}\n\n\t/** Whether this link has been destroyed. */\n\tisDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n}\n","import { EventDispatcher, GraphEdgeEvent, GraphEvent, GraphNodeEvent } from './event-dispatcher.js';\nimport { GraphEdge } from './graph-edge.js';\nimport { GraphNode } from './graph-node.js';\n\n/**\n * A graph manages a network of {@link GraphNode} nodes, connected\n * by {@link @Link} edges.\n */\nexport class Graph<T extends GraphNode> extends EventDispatcher<GraphEvent | GraphNodeEvent | GraphEdgeEvent> {\n\tprivate _emptySet: Set<GraphEdge<T, T>> = new Set();\n\n\tprivate _edges: Set<GraphEdge<T, T>> = new Set();\n\tprivate _parentEdges: Map<T, Set<GraphEdge<T, T>>> = new Map();\n\tprivate _childEdges: Map<T, Set<GraphEdge<T, T>>> = new Map();\n\n\t/** Returns a list of all parent->child edges on this graph. */\n\tpublic listEdges(): GraphEdge<T, T>[] {\n\t\treturn Array.from(this._edges);\n\t}\n\n\t/** Returns a list of all edges on the graph having the given node as their child. */\n\tpublic listParentEdges(node: T): GraphEdge<T, T>[] {\n\t\treturn Array.from(this._childEdges.get(node) || this._emptySet);\n\t}\n\n\t/** Returns a list of parent nodes for the given child node. */\n\tpublic listParents(node: T): T[] {\n\t\treturn this.listParentEdges(node).map((edge) => edge.getParent());\n\t}\n\n\t/** Returns a list of all edges on the graph having the given node as their parent. */\n\tpublic listChildEdges(node: T): GraphEdge<T, T>[] {\n\t\treturn Array.from(this._parentEdges.get(node) || this._emptySet);\n\t}\n\n\t/** Returns a list of child nodes for the given parent node. */\n\tpublic listChildren(node: T): T[] {\n\t\treturn this.listChildEdges(node).map((edge) => edge.getChild());\n\t}\n\n\tpublic disconnectParents(node: T, filter?: (n: T) => boolean): this {\n\t\tlet edges = this.listParentEdges(node);\n\t\tif (filter) {\n\t\t\tedges = edges.filter((edge) => filter(edge.getParent()));\n\t\t}\n\t\tedges.forEach((edge) => edge.dispose());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Creates a {@link GraphEdge} connecting two {@link GraphNode} instances. Edge is returned\n\t * for the caller to store.\n\t * @param a Owner\n\t * @param b Resource\n\t */\n\tpublic createEdge<A extends T, B extends T>(\n\t\tname: string,\n\t\ta: A,\n\t\tb: B,\n\t\tattributes?: Record<string, unknown>\n\t): GraphEdge<A, B> {\n\t\treturn this._registerEdge(new GraphEdge(name, a, b, attributes)) as GraphEdge<A, B>;\n\t}\n\n\t/**********************************************************************************************\n\t * Internal.\n\t */\n\n\t/** @hidden */\n\tprivate _registerEdge(edge: GraphEdge<T, T>): GraphEdge<T, T> {\n\t\tthis._edges.add(edge);\n\n\t\tconst parent = edge.getParent();\n\t\tif (!this._parentEdges.has(parent)) this._parentEdges.set(parent, new Set());\n\t\tthis._parentEdges.get(parent)!.add(edge);\n\n\t\tconst child = edge.getChild();\n\t\tif (!this._childEdges.has(child)) this._childEdges.set(child, new Set());\n\t\tthis._childEdges.get(child)!.add(edge);\n\n\t\tedge.addEventListener('dispose', () => this._removeEdge(edge));\n\t\treturn edge;\n\t}\n\n\t/**\n\t * Removes the {@link GraphEdge} from the {@link Graph}. This method should only\n\t * be invoked by the onDispose() listener created in {@link _registerEdge()}. The\n\t * public method of removing an edge is {@link GraphEdge.dispose}.\n\t */\n\tprivate _removeEdge(edge: GraphEdge<T, T>): this {\n\t\tthis._edges.delete(edge);\n\t\tthis._parentEdges.get(edge.getParent())!.delete(edge);\n\t\tthis._childEdges.get(edge.getChild())!.delete(edge);\n\t\treturn this;\n\t}\n}\n","import type { Ref, RefMap } from './constants.js';\nimport { GraphEdge } from './graph-edge.js';\n\nexport function isRef(value: Ref | unknown): boolean {\n\treturn value instanceof GraphEdge;\n}\n\nexport function isRefList(value: Ref[] | unknown): boolean {\n\treturn Array.isArray(value) && value[0] instanceof GraphEdge;\n}\n\nexport function isRefMap(value: RefMap | unknown): boolean {\n\treturn !!(isPlainObject(value) && getFirstValue(value) instanceof GraphEdge);\n}\n\nfunction getFirstValue(value: Record<string, unknown>): unknown {\n\tfor (const key in value) {\n\t\treturn value[key];\n\t}\n}\n\nfunction isPlainObject(value: unknown): value is Record<string, unknown> {\n\treturn Boolean(value) && Object.getPrototypeOf(value) === Object.prototype;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { LiteralKeys, Nullable, Ref, RefMap, RefKeys, RefListKeys, RefMapKeys } from './constants.js';\nimport { BaseEvent, EventDispatcher, GraphNodeEvent } from './event-dispatcher.js';\nimport { Graph } from './graph.js';\nimport { GraphEdge } from './graph-edge.js';\nimport { isRef, isRefList, isRefMap } from './utils.js';\n\n// References:\n// - https://stackoverflow.com/a/70163679/1314762\n// - https://stackoverflow.com/a/70201805/1314762\n\ntype GraphNodeAttributesInternal<Parent extends GraphNode, Attributes extends {}> = {\n\t[Key in keyof Attributes]: Attributes[Key] extends GraphNode\n\t\t? GraphEdge<Parent, Attributes[Key]>\n\t\t: Attributes[Key] extends GraphNode[]\n\t\t? GraphEdge<Parent, Attributes[Key][number]>[]\n\t\t: Attributes[Key] extends { [key: string]: GraphNode }\n\t\t? Record<string, GraphEdge<Parent, Attributes[Key][string]>>\n\t\t: Attributes[Key];\n};\n\nexport const $attributes = Symbol('attributes');\nexport const $immutableKeys = Symbol('immutableKeys');\n\n/**\n * Represents a node in a {@link Graph}.\n */\nexport abstract class GraphNode<Attributes extends {} = {}> extends EventDispatcher<GraphNodeEvent> {\n\tprivate _disposed = false;\n\n\t/**\n\t * Internal graph used to search and maintain references.\n\t * @hidden\n\t */\n\tprotected readonly graph: Graph<GraphNode>;\n\n\t/**\n\t * Attributes (literal values and GraphNode references) associated with this instance. For each\n\t * GraphNode reference, the attributes stores a {@link GraphEdge}. List and Map references are\n\t * stored as arrays and dictionaries of edges.\n\t * @internal\n\t */\n\tprotected readonly [$attributes]: GraphNodeAttributesInternal<this, Attributes>;\n\n\t/**\n\t * Attributes included with `getDefaultAttributes` are considered immutable, and cannot be\n\t * modifed by `.setRef()`, `.copy()`, or other GraphNode methods. Both the edges and the\n\t * properties will be disposed with the parent GraphNode.\n\t *\n\t * Currently, only single-edge references (getRef/setRef) are supported as immutables.\n\t *\n\t * @internal\n\t */\n\tprotected readonly [$immutableKeys]: Set<string>;\n\n\tconstructor(graph: Graph<GraphNode>) {\n\t\tsuper();\n\t\tthis.graph = graph;\n\t\tthis[$immutableKeys] = new Set();\n\t\tthis[$attributes] = this._createAttributes();\n\t}\n\n\t/**\n\t * Returns default attributes for the graph node. Subclasses having any attributes (either\n\t * literal values or references to other graph nodes) must override this method. Literal\n\t * attributes should be given their default values, if any. References should generally be\n\t * initialized as empty (Ref → null, RefList → [], RefMap → {}) and then modified by setters.\n\t *\n\t * Any single-edge references (setRef) returned by this method will be considered immutable,\n\t * to be owned by and disposed with the parent node. Multi-edge references (addRef, removeRef,\n\t * setRefMap) cannot be returned as default attributes.\n\t */\n\tprotected getDefaults(): Nullable<Attributes> {\n\t\treturn {} as Nullable<Attributes>;\n\t}\n\n\t/**\n\t * Constructs and returns an object used to store a graph nodes attributes. Compared to the\n\t * default Attributes interface, this has two distinctions:\n\t *\n\t * 1. Slots for GraphNode<T> objects are replaced with slots for GraphEdge<this, GraphNode<T>>\n\t * 2. GraphNode<T> objects provided as defaults are considered immutable\n\t *\n\t * @internal\n\t */\n\tprivate _createAttributes(): GraphNodeAttributesInternal<this, Attributes> {\n\t\tconst defaultAttributes = this.getDefaults();\n\t\tconst attributes = {} as GraphNodeAttributesInternal<this, Attributes>;\n\t\tfor (const key in defaultAttributes) {\n\t\t\tconst value = defaultAttributes[key] as any;\n\t\t\tif (value instanceof GraphNode) {\n\t\t\t\tconst ref = this.graph.createEdge(key, this, value);\n\t\t\t\tref.addEventListener('dispose', () => value.dispose());\n\t\t\t\tthis[$immutableKeys].add(key);\n\t\t\t\tattributes[key] = ref as any;\n\t\t\t} else {\n\t\t\t\tattributes[key] = value as any;\n\t\t\t}\n\t\t}\n\t\treturn attributes;\n\t}\n\n\t/** @internal Returns true if two nodes are on the same {@link Graph}. */\n\tpublic isOnGraph(other: GraphNode): boolean {\n\t\treturn this.graph === other.graph;\n\t}\n\n\t/** Returns true if the node has been permanently removed from the graph. */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\t/**\n\t * Removes both inbound references to and outbound references from this object. At the end\n\t * of the process the object holds no references, and nothing holds references to it. A\n\t * disposed object is not reusable.\n\t */\n\tpublic dispose(): void {\n\t\tif (this._disposed) return;\n\t\tthis.graph.listChildEdges(this).forEach((edge) => edge.dispose());\n\t\tthis.graph.disconnectParents(this);\n\t\tthis._disposed = true;\n\t\tthis.dispatchEvent({ type: 'dispose' });\n\t}\n\n\t/**\n\t * Removes all inbound references to this object. At the end of the process the object is\n\t * considered 'detached': it may hold references to child resources, but nothing holds\n\t * references to it. A detached object may be re-attached.\n\t */\n\tpublic detach(): this {\n\t\tthis.graph.disconnectParents(this);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Transfers this object's references from the old node to the new one. The old node is fully\n\t * detached from this parent at the end of the process.\n\t *\n\t * @hidden\n\t */\n\tpublic swap(old: GraphNode, replacement: GraphNode): this {\n\t\tfor (const attribute in this[$attributes]) {\n\t\t\tconst value = this[$attributes][attribute] as Ref | Ref[] | RefMap;\n\t\t\tif (isRef(value)) {\n\t\t\t\tconst ref = value as Ref;\n\t\t\t\tif (ref.getChild() === old) {\n\t\t\t\t\tthis.setRef(attribute as any, replacement, ref.getAttributes());\n\t\t\t\t}\n\t\t\t} else if (isRefList(value)) {\n\t\t\t\tconst refs = value as Ref[];\n\t\t\t\tconst ref = refs.find((ref) => ref.getChild() === old);\n\t\t\t\tif (ref) {\n\t\t\t\t\tconst refAttributes = ref.getAttributes();\n\t\t\t\t\tthis.removeRef(attribute as any, old).addRef(attribute as any, replacement, refAttributes);\n\t\t\t\t}\n\t\t\t} else if (isRefMap(value)) {\n\t\t\t\tconst refMap = value as RefMap;\n\t\t\t\tfor (const key in refMap) {\n\t\t\t\t\tconst ref = refMap[key];\n\t\t\t\t\tif (ref.getChild() === old) {\n\t\t\t\t\t\tthis.setRefMap(attribute as any, key, replacement, ref.getAttributes());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * Literal attributes.\n\t */\n\n\t/** @hidden */\n\tprotected get<K extends LiteralKeys<Attributes>>(attribute: K): Attributes[K] {\n\t\treturn this[$attributes][attribute] as Attributes[K];\n\t}\n\n\t/** @hidden */\n\tprotected set<K extends LiteralKeys<Attributes>>(attribute: K, value: Attributes[K]): this {\n\t\t(this[$attributes][attribute] as Attributes[K]) = value;\n\t\treturn this.dispatchEvent({ type: 'change', attribute });\n\t}\n\n\t/**********************************************************************************************\n\t * Ref: 1:1 graph node references.\n\t */\n\n\t/** @hidden */\n\tprotected getRef<K extends RefKeys<Attributes>>(attribute: K): (GraphNode & Attributes[K]) | null {\n\t\tconst ref = this[$attributes][attribute] as Ref;\n\t\treturn ref ? (ref.getChild() as GraphNode & Attributes[K]) : null;\n\t}\n\n\t/** @hidden */\n\tprotected setRef<K extends RefKeys<Attributes>>(\n\t\tattribute: K,\n\t\tvalue: (GraphNode & Attributes[K]) | null,\n\t\tattributes?: Record<string, unknown>\n\t): this {\n\t\tif (this[$immutableKeys].has(attribute as string)) {\n\t\t\tthrow new Error(`Cannot overwrite immutable attribute, \"${attribute as string}\".`);\n\t\t}\n\n\t\tconst prevRef = this[$attributes][attribute] as Ref;\n\t\tif (prevRef) prevRef.dispose(); // TODO(cleanup): Possible duplicate event.\n\n\t\tif (!value) return this;\n\n\t\tconst ref = this.graph.createEdge(attribute as string, this, value, attributes);\n\t\tref.addEventListener('dispose', () => {\n\t\t\tdelete this[$attributes][attribute];\n\t\t\tthis.dispatchEvent({ type: 'change', attribute });\n\t\t});\n\t\t(this[$attributes][attribute] as Ref) = ref;\n\n\t\treturn this.dispatchEvent({ type: 'change', attribute });\n\t}\n\n\t/**********************************************************************************************\n\t * RefList: 1:many graph node references.\n\t */\n\n\t/** @hidden */\n\tprotected listRefs<K extends RefListKeys<Attributes>>(attribute: K): GraphNode[] & Attributes[K] {\n\t\tconst refs = this[$attributes][attribute] as Ref[];\n\t\treturn refs.map((ref) => ref.getChild()) as GraphNode[] & Attributes[K];\n\t}\n\n\t/** @hidden */\n\tprotected addRef<K extends RefListKeys<Attributes>>(\n\t\tattribute: K,\n\t\tvalue: GraphNode & Attributes[K][keyof Attributes[K]],\n\t\tattributes?: Record<string, unknown>\n\t): this {\n\t\tconst ref = this.graph.createEdge(attribute as string, this, value, attributes);\n\n\t\tconst refs = this[$attributes][attribute] as Ref[];\n\t\trefs.push(ref);\n\n\t\tref.addEventListener('dispose', () => {\n\t\t\tlet index;\n\t\t\twhile ((index = refs.indexOf(ref)) !== -1) {\n\t\t\t\trefs.splice(index, 1);\n\t\t\t}\n\t\t\tthis.dispatchEvent({ type: 'change', attribute });\n\t\t});\n\n\t\treturn this.dispatchEvent({ type: 'change', attribute });\n\t}\n\n\t/** @hidden */\n\tprotected removeRef<K extends RefListKeys<Attributes>>(\n\t\tattribute: K,\n\t\tvalue: GraphNode & Attributes[K][keyof Attributes[K]]\n\t): this {\n\t\tconst refs = this[$attributes][attribute] as Ref[];\n\t\tconst pruned = refs.filter((ref) => ref.getChild() === value);\n\t\tpruned.forEach((ref) => ref.dispose()); // TODO(cleanup): Possible duplicate event.\n\t\treturn this;\n\t}\n\n\t/**********************************************************************************************\n\t * RefMap: Named 1:many (map) graph node references.\n\t */\n\n\t/** @hidden */\n\tprotected listRefMapKeys<K extends RefMapKeys<Attributes>>(key: K): string[] {\n\t\treturn Object.keys(this[$attributes][key] as any);\n\t}\n\n\t/** @hidden */\n\tprotected listRefMapValues<K extends RefMapKeys<Attributes>>(\n\t\tkey: K\n\t): GraphNode[] & Attributes[K][keyof Attributes[K]][] {\n\t\treturn Object.values(this[$attributes][key] as any).map((ref: any) => ref.getChild());\n\t}\n\n\t/** @hidden */\n\tprotected getRefMap<K extends RefMapKeys<Attributes>, SK extends keyof Attributes[K]>(\n\t\tattribute: K,\n\t\tkey: SK\n\t): (GraphNode & Attributes[K][SK]) | null {\n\t\tconst refMap = this[$attributes][attribute] as any;\n\t\treturn refMap[key] ? refMap[key].getChild() : null;\n\t}\n\n\t/** @hidden */\n\tprotected setRefMap<K extends RefMapKeys<Attributes>, SK extends keyof Attributes[K]>(\n\t\tattribute: K,\n\t\tkey: SK,\n\t\tvalue: (GraphNode & Attributes[K][SK]) | null,\n\t\tmetadata?: Record<string, unknown>\n\t): this {\n\t\tconst refMap = this[$attributes][attribute] as any;\n\n\t\tconst prevRef = refMap[key];\n\t\tif (prevRef) prevRef.dispose(); // TODO(cleanup): Possible duplicate event.\n\n\t\tif (!value) return this;\n\n\t\tmetadata = Object.assign(metadata || {}, { key: key });\n\t\tconst ref = this.graph.createEdge(attribute as string, this, value, { ...metadata, key });\n\t\tref.addEventListener('dispose', () => {\n\t\t\tdelete refMap[key];\n\t\t\tthis.dispatchEvent({ type: 'change', attribute, key });\n\t\t});\n\t\trefMap[key] = ref;\n\n\t\treturn this.dispatchEvent({ type: 'change', attribute, key });\n\t}\n\n\t/**********************************************************************************************\n\t * Events.\n\t */\n\n\t/**\n\t * Dispatches an event on the GraphNode, and on the associated\n\t * Graph. Event types on the graph are prefixed, `\"node:[type]\"`.\n\t */\n\tdispatchEvent(event: BaseEvent): this {\n\t\tsuper.dispatchEvent({ ...event, target: this });\n\t\tthis.graph.dispatchEvent({ ...event, target: this, type: `node:${event.type}` });\n\t\treturn this;\n\t}\n}\n"],"names":["EventDispatcher","_listeners","addEventListener","type","listener","listeners","undefined","indexOf","push","removeEventListener","listenerArray","index","splice","dispatchEvent","event","array","slice","i","l","length","call","dispose","key","GraphEdge","constructor","_name","_parent","_child","_attributes","_disposed","isOnGraph","Error","getName","getParent","getChild","setChild","child","getAttributes","target","isDisposed","Graph","_emptySet","Set","_edges","_parentEdges","Map","_childEdges","listEdges","Array","from","listParentEdges","node","get","listParents","map","edge","listChildEdges","listChildren","disconnectParents","filter","edges","forEach","createEdge","name","a","b","attributes","_registerEdge","add","parent","has","set","_removeEdge","delete","isRef","value","isRefList","isArray","isRefMap","isPlainObject","getFirstValue","Boolean","Object","getPrototypeOf","prototype","$attributes","Symbol","$immutableKeys","GraphNode","graph","_createAttributes","getDefaults","defaultAttributes","ref","other","detach","swap","old","replacement","attribute","setRef","refs","find","refAttributes","removeRef","addRef","refMap","setRefMap","getRef","prevRef","listRefs","pruned","listRefMapKeys","keys","listRefMapValues","values","getRefMap","metadata","assign"],"mappings":"MAuBaA;;SACJC,aAAa;;;AAErBC,EAAAA,gBAAgB,CAACC,IAAD,EAAeC,QAAf;AACf,UAAMC,SAAS,GAAG,KAAKJ,UAAvB;;AAEA,QAAII,SAAS,CAACF,IAAD,CAAT,KAAoBG,SAAxB,EAAmC;AAClCD,MAAAA,SAAS,CAACF,IAAD,CAAT,GAAkB,EAAlB;AACA;;AAED,QAAIE,SAAS,CAACF,IAAD,CAAT,CAAgBI,OAAhB,CAAwBH,QAAxB,MAAsC,CAAC,CAA3C,EAA8C;AAC7CC,MAAAA,SAAS,CAACF,IAAD,CAAT,CAAgBK,IAAhB,CAAqBJ,QAArB;AACA;;AAED,WAAO,IAAP;AACA;;AAEDK,EAAAA,mBAAmB,CAACN,IAAD,EAAeC,QAAf;AAClB,QAAI,KAAKH,UAAL,KAAoBK,SAAxB,EAAmC,OAAO,IAAP;AAEnC,UAAMD,SAAS,GAAG,KAAKJ,UAAvB;AACA,UAAMS,aAAa,GAAGL,SAAS,CAACF,IAAD,CAA/B;;AAEA,QAAIO,aAAa,KAAKJ,SAAtB,EAAiC;AAChC,YAAMK,KAAK,GAAGD,aAAa,CAACH,OAAd,CAAsBH,QAAtB,CAAd;;AAEA,UAAIO,KAAK,KAAK,CAAC,CAAf,EAAkB;AACjBD,QAAAA,aAAa,CAACE,MAAd,CAAqBD,KAArB,EAA4B,CAA5B;AACA;AACD;;AAED,WAAO,IAAP;AACA;;AAEDE,EAAAA,aAAa,CAACC,KAAD;AACZ,QAAI,KAAKb,UAAL,KAAoBK,SAAxB,EAAmC,OAAO,IAAP;AAEnC,UAAMD,SAAS,GAAG,KAAKJ,UAAvB;AACA,UAAMS,aAAa,GAAGL,SAAS,CAACS,KAAK,CAACX,IAAP,CAA/B;;AAEA,QAAIO,aAAa,KAAKJ,SAAtB,EAAiC;AAChC;AACA,YAAMS,KAAK,GAAGL,aAAa,CAACM,KAAd,CAAoB,CAApB,CAAd;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;AAC7CF,QAAAA,KAAK,CAACE,CAAD,CAAL,CAASG,IAAT,CAAc,IAAd,EAAoBN,KAApB;AACA;AACD;;AAED,WAAO,IAAP;AACA;;AAEDO,EAAAA,OAAO;AACN,SAAK,MAAMC,GAAX,IAAkB,KAAKrB,UAAvB,EAAmC;AAClC,aAAO,KAAKA,UAAL,CAAgBqB,GAAhB,CAAP;AACA;AACD;;;;AC5EF;;;;;;;;;MAQaC,kBAAqEvB;AAGjFwB,EAAAA,YACkBC,OACAC,SACTC,QACAC,cAAuC;AAE/C;SALiBH;SACAC;SACTC;SACAC;SANDC,YAAY;AAGF,cAAA,GAAAJ,KAAA;AACA,gBAAA,GAAAC,OAAA;AACT,eAAA,GAAAC,MAAA;AACA,oBAAA,GAAAC,WAAA;;AAGR,QAAI,CAACF,OAAO,CAACI,SAAR,CAAkBH,MAAlB,CAAL,EAAgC;AAC/B,YAAM,IAAII,KAAJ,CAAU,qCAAV,CAAN;AACA;AACD;AAED;;;AACAC,EAAAA,OAAO;AACN,WAAO,KAAKP,KAAZ;AACA;AAED;;;AACAQ,EAAAA,SAAS;AACR,WAAO,KAAKP,OAAZ;AACA;AAED;;;AACAQ,EAAAA,QAAQ;AACP,WAAO,KAAKP,MAAZ;AACA;AAED;;;;;;;;AAMAQ,EAAAA,QAAQ,CAACC,KAAD;AACP,SAAKT,MAAL,GAAcS,KAAd;AACA,WAAO,IAAP;AACA;AAED;;;AACAC,EAAAA,aAAa;AACZ,WAAO,KAAKT,WAAZ;AACA;AAED;;;AACAP,EAAAA,OAAO;AACN,QAAI,KAAKQ,SAAT,EAAoB;AACpB,SAAKA,SAAL,GAAiB,IAAjB;AACA,SAAKhB,aAAL,CAAmB;AAAEV,MAAAA,IAAI,EAAE,SAAR;AAAmBmC,MAAAA,MAAM,EAAE;AAA3B,KAAnB;AACA,UAAMjB,OAAN;AACA;AAED;;;AACAkB,EAAAA,UAAU;AACT,WAAO,KAAKV,SAAZ;AACA;;;;AChEF;;;;;MAIaW,cAAmCxC;;;SACvCyC,YAAkC,IAAIC,GAAJ;SAElCC,SAA+B,IAAID,GAAJ;SAC/BE,eAA6C,IAAIC,GAAJ;SAC7CC,cAA4C,IAAID,GAAJ;;;AAEpD;AACOE,EAAAA,SAAS;AACf,WAAOC,KAAK,CAACC,IAAN,CAAW,KAAKN,MAAhB,CAAP;AACA;AAED;;;AACOO,EAAAA,eAAe,CAACC,IAAD;AACrB,WAAOH,KAAK,CAACC,IAAN,CAAW,KAAKH,WAAL,CAAiBM,GAAjB,CAAqBD,IAArB,KAA8B,KAAKV,SAA9C,CAAP;AACA;AAED;;;AACOY,EAAAA,WAAW,CAACF,IAAD;AACjB,WAAO,KAAKD,eAAL,CAAqBC,IAArB,EAA2BG,GAA3B,CAAgCC,IAAD,IAAUA,IAAI,CAACtB,SAAL,EAAzC,CAAP;AACA;AAED;;;AACOuB,EAAAA,cAAc,CAACL,IAAD;AACpB,WAAOH,KAAK,CAACC,IAAN,CAAW,KAAKL,YAAL,CAAkBQ,GAAlB,CAAsBD,IAAtB,KAA+B,KAAKV,SAA/C,CAAP;AACA;AAED;;;AACOgB,EAAAA,YAAY,CAACN,IAAD;AAClB,WAAO,KAAKK,cAAL,CAAoBL,IAApB,EAA0BG,GAA1B,CAA+BC,IAAD,IAAUA,IAAI,CAACrB,QAAL,EAAxC,CAAP;AACA;;AAEMwB,EAAAA,iBAAiB,CAACP,IAAD,EAAUQ,MAAV;AACvB,QAAIC,KAAK,GAAG,KAAKV,eAAL,CAAqBC,IAArB,CAAZ;;AACA,QAAIQ,MAAJ,EAAY;AACXC,MAAAA,KAAK,GAAGA,KAAK,CAACD,MAAN,CAAcJ,IAAD,IAAUI,MAAM,CAACJ,IAAI,CAACtB,SAAL,EAAD,CAA7B,CAAR;AACA;;AACD2B,IAAAA,KAAK,CAACC,OAAN,CAAeN,IAAD,IAAUA,IAAI,CAAClC,OAAL,EAAxB;AACA,WAAO,IAAP;AACA;AAED;;;;;;;;AAMOyC,EAAAA,UAAU,CAChBC,IADgB,EAEhBC,CAFgB,EAGhBC,CAHgB,EAIhBC,UAJgB;AAMhB,WAAO,KAAKC,aAAL,CAAmB,IAAI5C,SAAJ,CAAcwC,IAAd,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0BC,UAA1B,CAAnB,CAAP;AACA;AAED;;;;AAIA;;;AACQC,EAAAA,aAAa,CAACZ,IAAD;AACpB,SAAKZ,MAAL,CAAYyB,GAAZ,CAAgBb,IAAhB;;AAEA,UAAMc,MAAM,GAAGd,IAAI,CAACtB,SAAL,EAAf;AACA,QAAI,CAAC,KAAKW,YAAL,CAAkB0B,GAAlB,CAAsBD,MAAtB,CAAL,EAAoC,KAAKzB,YAAL,CAAkB2B,GAAlB,CAAsBF,MAAtB,EAA8B,IAAI3B,GAAJ,EAA9B;;AACpC,SAAKE,YAAL,CAAkBQ,GAAlB,CAAsBiB,MAAtB,EAA+BD,GAA/B,CAAmCb,IAAnC;;AAEA,UAAMnB,KAAK,GAAGmB,IAAI,CAACrB,QAAL,EAAd;AACA,QAAI,CAAC,KAAKY,WAAL,CAAiBwB,GAAjB,CAAqBlC,KAArB,CAAL,EAAkC,KAAKU,WAAL,CAAiByB,GAAjB,CAAqBnC,KAArB,EAA4B,IAAIM,GAAJ,EAA5B;;AAClC,SAAKI,WAAL,CAAiBM,GAAjB,CAAqBhB,KAArB,EAA6BgC,GAA7B,CAAiCb,IAAjC;;AAEAA,IAAAA,IAAI,CAACrD,gBAAL,CAAsB,SAAtB,EAAiC,MAAM,KAAKsE,WAAL,CAAiBjB,IAAjB,CAAvC;AACA,WAAOA,IAAP;AACA;AAED;;;;;;;AAKQiB,EAAAA,WAAW,CAACjB,IAAD;AAClB,SAAKZ,MAAL,CAAY8B,MAAZ,CAAmBlB,IAAnB;;AACA,SAAKX,YAAL,CAAkBQ,GAAlB,CAAsBG,IAAI,CAACtB,SAAL,EAAtB,EAAyCwC,MAAzC,CAAgDlB,IAAhD;;AACA,SAAKT,WAAL,CAAiBM,GAAjB,CAAqBG,IAAI,CAACrB,QAAL,EAArB,EAAuCuC,MAAvC,CAA8ClB,IAA9C;;AACA,WAAO,IAAP;AACA;;;;;;;;;;;;;;;;;;;;;;SC3FcmB,MAAMC;AACrB,SAAOA,KAAK,YAAYpD,SAAxB;AACA;SAEeqD,UAAUD;AACzB,SAAO3B,KAAK,CAAC6B,OAAN,CAAcF,KAAd,KAAwBA,KAAK,CAAC,CAAD,CAAL,YAAoBpD,SAAnD;AACA;SAEeuD,SAASH;AACxB,SAAO,CAAC,EAAEI,aAAa,CAACJ,KAAD,CAAb,IAAwBK,aAAa,CAACL,KAAD,CAAb,YAAgCpD,SAA1D,CAAR;AACA;;AAED,SAASyD,aAAT,CAAuBL,KAAvB;AACC,OAAK,MAAMrD,GAAX,IAAkBqD,KAAlB,EAAyB;AACxB,WAAOA,KAAK,CAACrD,GAAD,CAAZ;AACA;AACD;;AAED,SAASyD,aAAT,CAAuBJ,KAAvB;AACC,SAAOM,OAAO,CAACN,KAAD,CAAP,IAAkBO,MAAM,CAACC,cAAP,CAAsBR,KAAtB,MAAiCO,MAAM,CAACE,SAAjE;AACA;;MCDYC,WAAW,GAAGC,MAAM,CAAC,YAAD;MACpBC,cAAc,GAAGD,MAAM,CAAC,eAAD;AAEpC;;;;MAGsBE,kBAA8CxF;AAGnE;;;;;AAMA;;;;;;;AAQA;;;;;;;;;AAWAwB,EAAAA,YAAYiE;AACX;SA5BO5D,YAAY;SAMD4D;SAQCJ;SAWAE;AAInB,SAAKE,KAAL,GAAaA,KAAb;AACA,SAAKF,cAAL,IAAuB,IAAI7C,GAAJ,EAAvB;AACA,SAAK2C,WAAL,IAAoB,KAAKK,iBAAL,EAApB;AACA;AAED;;;;;;;;;;;;AAUUC,EAAAA,WAAW;AACpB,WAAO,EAAP;AACA;AAED;;;;;;;;;;;AASQD,EAAAA,iBAAiB;AACxB,UAAME,iBAAiB,GAAG,KAAKD,WAAL,EAA1B;AACA,UAAMzB,UAAU,GAAG,EAAnB;;AACA,SAAK,MAAM5C,GAAX,IAAkBsE,iBAAlB,EAAqC;AACpC,YAAMjB,KAAK,GAAGiB,iBAAiB,CAACtE,GAAD,CAA/B;;AACA,UAAIqD,KAAK,YAAYa,SAArB,EAAgC;AAC/B,cAAMK,GAAG,GAAG,KAAKJ,KAAL,CAAW3B,UAAX,CAAsBxC,GAAtB,EAA2B,IAA3B,EAAiCqD,KAAjC,CAAZ;AACAkB,QAAAA,GAAG,CAAC3F,gBAAJ,CAAqB,SAArB,EAAgC,MAAMyE,KAAK,CAACtD,OAAN,EAAtC;AACA,aAAKkE,cAAL,EAAqBnB,GAArB,CAAyB9C,GAAzB;AACA4C,QAAAA,UAAU,CAAC5C,GAAD,CAAV,GAAkBuE,GAAlB;AACA,OALD,MAKO;AACN3B,QAAAA,UAAU,CAAC5C,GAAD,CAAV,GAAkBqD,KAAlB;AACA;AACD;;AACD,WAAOT,UAAP;AACA;AAED;;;AACOpC,EAAAA,SAAS,CAACgE,KAAD;AACf,WAAO,KAAKL,KAAL,KAAeK,KAAK,CAACL,KAA5B;AACA;AAED;;;AACOlD,EAAAA,UAAU;AAChB,WAAO,KAAKV,SAAZ;AACA;AAED;;;;;;;AAKOR,EAAAA,OAAO;AACb,QAAI,KAAKQ,SAAT,EAAoB;AACpB,SAAK4D,KAAL,CAAWjC,cAAX,CAA0B,IAA1B,EAAgCK,OAAhC,CAAyCN,IAAD,IAAUA,IAAI,CAAClC,OAAL,EAAlD;AACA,SAAKoE,KAAL,CAAW/B,iBAAX,CAA6B,IAA7B;AACA,SAAK7B,SAAL,GAAiB,IAAjB;AACA,SAAKhB,aAAL,CAAmB;AAAEV,MAAAA,IAAI,EAAE;AAAR,KAAnB;AACA;AAED;;;;;;;AAKO4F,EAAAA,MAAM;AACZ,SAAKN,KAAL,CAAW/B,iBAAX,CAA6B,IAA7B;AACA,WAAO,IAAP;AACA;AAED;;;;;;;;AAMOsC,EAAAA,IAAI,CAACC,GAAD,EAAiBC,WAAjB;AACV,SAAK,MAAMC,SAAX,IAAwB,KAAKd,WAAL,CAAxB,EAA2C;AAC1C,YAAMV,KAAK,GAAG,KAAKU,WAAL,EAAkBc,SAAlB,CAAd;;AACA,UAAIzB,KAAK,CAACC,KAAD,CAAT,EAAkB;AACjB,cAAMkB,GAAG,GAAGlB,KAAZ;;AACA,YAAIkB,GAAG,CAAC3D,QAAJ,OAAmB+D,GAAvB,EAA4B;AAC3B,eAAKG,MAAL,CAAYD,SAAZ,EAA8BD,WAA9B,EAA2CL,GAAG,CAACxD,aAAJ,EAA3C;AACA;AACD,OALD,MAKO,IAAIuC,SAAS,CAACD,KAAD,CAAb,EAAsB;AAC5B,cAAM0B,IAAI,GAAG1B,KAAb;AACA,cAAMkB,GAAG,GAAGQ,IAAI,CAACC,IAAL,CAAWT,GAAD,IAASA,GAAG,CAAC3D,QAAJ,OAAmB+D,GAAtC,CAAZ;;AACA,YAAIJ,GAAJ,EAAS;AACR,gBAAMU,aAAa,GAAGV,GAAG,CAACxD,aAAJ,EAAtB;AACA,eAAKmE,SAAL,CAAeL,SAAf,EAAiCF,GAAjC,EAAsCQ,MAAtC,CAA6CN,SAA7C,EAA+DD,WAA/D,EAA4EK,aAA5E;AACA;AACD,OAPM,MAOA,IAAIzB,QAAQ,CAACH,KAAD,CAAZ,EAAqB;AAC3B,cAAM+B,MAAM,GAAG/B,KAAf;;AACA,aAAK,MAAMrD,GAAX,IAAkBoF,MAAlB,EAA0B;AACzB,gBAAMb,GAAG,GAAGa,MAAM,CAACpF,GAAD,CAAlB;;AACA,cAAIuE,GAAG,CAAC3D,QAAJ,OAAmB+D,GAAvB,EAA4B;AAC3B,iBAAKU,SAAL,CAAeR,SAAf,EAAiC7E,GAAjC,EAAsC4E,WAAtC,EAAmDL,GAAG,CAACxD,aAAJ,EAAnD;AACA;AACD;AACD;AACD;;AACD,WAAO,IAAP;AACA;AAED;;;;AAIA;;;AACUe,EAAAA,GAAG,CAAoC+C,SAApC;AACZ,WAAO,KAAKd,WAAL,EAAkBc,SAAlB,CAAP;AACA;AAED;;;AACU5B,EAAAA,GAAG,CAAoC4B,SAApC,EAAkDxB,KAAlD;AACX,SAAKU,WAAL,EAAkBc,SAAlB,IAAiDxB,KAAjD;AACD,WAAO,KAAK9D,aAAL,CAAmB;AAAEV,MAAAA,IAAI,EAAE,QAAR;AAAkBgG,MAAAA;AAAlB,KAAnB,CAAP;AACA;AAED;;;;AAIA;;;AACUS,EAAAA,MAAM,CAAgCT,SAAhC;AACf,UAAMN,GAAG,GAAG,KAAKR,WAAL,EAAkBc,SAAlB,CAAZ;AACA,WAAON,GAAG,GAAIA,GAAG,CAAC3D,QAAJ,EAAJ,GAAmD,IAA7D;AACA;AAED;;;AACUkE,EAAAA,MAAM,CACfD,SADe,EAEfxB,KAFe,EAGfT,UAHe;AAKf,QAAI,KAAKqB,cAAL,EAAqBjB,GAArB,CAAyB6B,SAAzB,CAAJ,EAAmD;AAClD,YAAM,IAAIpE,KAAJ,2CAAoDoE,aAApD,CAAN;AACA;;AAED,UAAMU,OAAO,GAAG,KAAKxB,WAAL,EAAkBc,SAAlB,CAAhB;AACA,QAAIU,OAAJ,EAAaA,OAAO,CAACxF,OAAR;;AAEb,QAAI,CAACsD,KAAL,EAAY,OAAO,IAAP;AAEZ,UAAMkB,GAAG,GAAG,KAAKJ,KAAL,CAAW3B,UAAX,CAAsBqC,SAAtB,EAA2C,IAA3C,EAAiDxB,KAAjD,EAAwDT,UAAxD,CAAZ;AACA2B,IAAAA,GAAG,CAAC3F,gBAAJ,CAAqB,SAArB,EAAgC;AAC/B,aAAO,KAAKmF,WAAL,EAAkBc,SAAlB,CAAP;AACA,WAAKtF,aAAL,CAAmB;AAAEV,QAAAA,IAAI,EAAE,QAAR;AAAkBgG,QAAAA;AAAlB,OAAnB;AACA,KAHD;AAIC,SAAKd,WAAL,EAAkBc,SAAlB,IAAuCN,GAAvC;AAED,WAAO,KAAKhF,aAAL,CAAmB;AAAEV,MAAAA,IAAI,EAAE,QAAR;AAAkBgG,MAAAA;AAAlB,KAAnB,CAAP;AACA;AAED;;;;AAIA;;;AACUW,EAAAA,QAAQ,CAAoCX,SAApC;AACjB,UAAME,IAAI,GAAG,KAAKhB,WAAL,EAAkBc,SAAlB,CAAb;AACA,WAAOE,IAAI,CAAC/C,GAAL,CAAUuC,GAAD,IAASA,GAAG,CAAC3D,QAAJ,EAAlB,CAAP;AACA;AAED;;;AACUuE,EAAAA,MAAM,CACfN,SADe,EAEfxB,KAFe,EAGfT,UAHe;AAKf,UAAM2B,GAAG,GAAG,KAAKJ,KAAL,CAAW3B,UAAX,CAAsBqC,SAAtB,EAA2C,IAA3C,EAAiDxB,KAAjD,EAAwDT,UAAxD,CAAZ;AAEA,UAAMmC,IAAI,GAAG,KAAKhB,WAAL,EAAkBc,SAAlB,CAAb;AACAE,IAAAA,IAAI,CAAC7F,IAAL,CAAUqF,GAAV;AAEAA,IAAAA,GAAG,CAAC3F,gBAAJ,CAAqB,SAArB,EAAgC;AAC/B,UAAIS,KAAJ;;AACA,aAAO,CAACA,KAAK,GAAG0F,IAAI,CAAC9F,OAAL,CAAasF,GAAb,CAAT,MAAgC,CAAC,CAAxC,EAA2C;AAC1CQ,QAAAA,IAAI,CAACzF,MAAL,CAAYD,KAAZ,EAAmB,CAAnB;AACA;;AACD,WAAKE,aAAL,CAAmB;AAAEV,QAAAA,IAAI,EAAE,QAAR;AAAkBgG,QAAAA;AAAlB,OAAnB;AACA,KAND;AAQA,WAAO,KAAKtF,aAAL,CAAmB;AAAEV,MAAAA,IAAI,EAAE,QAAR;AAAkBgG,MAAAA;AAAlB,KAAnB,CAAP;AACA;AAED;;;AACUK,EAAAA,SAAS,CAClBL,SADkB,EAElBxB,KAFkB;AAIlB,UAAM0B,IAAI,GAAG,KAAKhB,WAAL,EAAkBc,SAAlB,CAAb;AACA,UAAMY,MAAM,GAAGV,IAAI,CAAC1C,MAAL,CAAakC,GAAD,IAASA,GAAG,CAAC3D,QAAJ,OAAmByC,KAAxC,CAAf;AACAoC,IAAAA,MAAM,CAAClD,OAAP,CAAgBgC,GAAD,IAASA,GAAG,CAACxE,OAAJ,EAAxB;;AACA,WAAO,IAAP;AACA;AAED;;;;AAIA;;;AACU2F,EAAAA,cAAc,CAAmC1F,GAAnC;AACvB,WAAO4D,MAAM,CAAC+B,IAAP,CAAY,KAAK5B,WAAL,EAAkB/D,GAAlB,CAAZ,CAAP;AACA;AAED;;;AACU4F,EAAAA,gBAAgB,CACzB5F,GADyB;AAGzB,WAAO4D,MAAM,CAACiC,MAAP,CAAc,KAAK9B,WAAL,EAAkB/D,GAAlB,CAAd,EAA6CgC,GAA7C,CAAkDuC,GAAD,IAAcA,GAAG,CAAC3D,QAAJ,EAA/D,CAAP;AACA;AAED;;;AACUkF,EAAAA,SAAS,CAClBjB,SADkB,EAElB7E,GAFkB;AAIlB,UAAMoF,MAAM,GAAG,KAAKrB,WAAL,EAAkBc,SAAlB,CAAf;AACA,WAAOO,MAAM,CAACpF,GAAD,CAAN,GAAcoF,MAAM,CAACpF,GAAD,CAAN,CAAYY,QAAZ,EAAd,GAAuC,IAA9C;AACA;AAED;;;AACUyE,EAAAA,SAAS,CAClBR,SADkB,EAElB7E,GAFkB,EAGlBqD,KAHkB,EAIlB0C,QAJkB;AAMlB,UAAMX,MAAM,GAAG,KAAKrB,WAAL,EAAkBc,SAAlB,CAAf;AAEA,UAAMU,OAAO,GAAGH,MAAM,CAACpF,GAAD,CAAtB;AACA,QAAIuF,OAAJ,EAAaA,OAAO,CAACxF,OAAR;;AAEb,QAAI,CAACsD,KAAL,EAAY,OAAO,IAAP;AAEZ0C,IAAAA,QAAQ,GAAGnC,MAAM,CAACoC,MAAP,CAAcD,QAAQ,IAAI,EAA1B,EAA8B;AAAE/F,MAAAA,GAAG,EAAEA;AAAP,KAA9B,CAAX;AACA,UAAMuE,GAAG,GAAG,KAAKJ,KAAL,CAAW3B,UAAX,CAAsBqC,SAAtB,EAA2C,IAA3C,EAAiDxB,KAAjD,eAA6D0C,QAA7D;AAAuE/F,MAAAA;AAAvE,OAAZ;AACAuE,IAAAA,GAAG,CAAC3F,gBAAJ,CAAqB,SAArB,EAAgC;AAC/B,aAAOwG,MAAM,CAACpF,GAAD,CAAb;AACA,WAAKT,aAAL,CAAmB;AAAEV,QAAAA,IAAI,EAAE,QAAR;AAAkBgG,QAAAA,SAAlB;AAA6B7E,QAAAA;AAA7B,OAAnB;AACA,KAHD;AAIAoF,IAAAA,MAAM,CAACpF,GAAD,CAAN,GAAcuE,GAAd;AAEA,WAAO,KAAKhF,aAAL,CAAmB;AAAEV,MAAAA,IAAI,EAAE,QAAR;AAAkBgG,MAAAA,SAAlB;AAA6B7E,MAAAA;AAA7B,KAAnB,CAAP;AACA;AAED;;;;AAIA;;;;;;AAIAT,EAAAA,aAAa,CAACC,KAAD;AACZ,UAAMD,aAAN,cAAyBC,KAAzB;AAAgCwB,MAAAA,MAAM,EAAE;AAAxC;AACA,SAAKmD,KAAL,CAAW5E,aAAX,cAA8BC,KAA9B;AAAqCwB,MAAAA,MAAM,EAAE,IAA7C;AAAmDnC,MAAAA,IAAI,UAAUW,KAAK,CAACX;AAAvE;AACA,WAAO,IAAP;AACA;;;;;;"}